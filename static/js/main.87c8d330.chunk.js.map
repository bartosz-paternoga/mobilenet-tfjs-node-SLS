{"version":3,"sources":["logo.svg","sound.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","selectedFile","url","handleUploadImages","images","URL","Loader","modelLoad","document","getElementById","style","display","imgPreview","src","uploads","map","image","formData","FormData","append","Date","now","axios","post","headers","X-Requested-With","then","response","_this","setState","data","console","log","all","str","len","length","res","substring","res1","OpenWhiskUrl","concat","ourRequest","XMLHttpRequest","open","setRequestHeader","onload","status","play","responseText","toString","alert","send","JSON","stringify","translate","react_default","a","createElement","className","logo","alt","id","sound","preload","es","onDrop","this","multiple","accept","width","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87c8d330.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sound.d3b3ccc5.mp3\";","import React, { Component } from 'react'\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\nimport logo from './logo.svg'\nimport sound from './sound.mp3'\nimport './App.css'\n\n\nclass App extends Component {\n\n        state = {\n          selectedFile: '',\n          url: ''\n        };\n\n\n  // This function does the uploading to cloudinary\n  handleUploadImages = images => {\n\n    let URL;\n\n    const Loader = (modelLoad) => {\n    \n      if (modelLoad !==\"\") {\n          const elem1 = document.getElementById('loading-message');\n          elem1.style.display = 'block';\n          const elem2 = document.getElementById('sk-cube-grid');\n          elem2.style.display = 'block';\n\n      } else {\n          const elem1 = document.getElementById('loading-message');\n          elem1.style.display = '';\n          const elem2 = document.getElementById('sk-cube-grid');\n          elem2.style.display = '';\n\n          }\n        } \n\n    Loader('x');\n\n    const imgPreview = document.getElementById('img-preview');\n    imgPreview.src = '';\n   \n    // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n    const uploads = images.map(image => {\n      // our formdata\n      const formData = new FormData();\n      formData.append(\"file\", image);\n      formData.append(\"tags\", '{TAGS}'); // Add tags for the images - {Array}\n      formData.append(\"upload_preset\", \"wpd7mzsm\"); // Replace the preset name with your own\n      formData.append(\"api_key\", \"278776248912159\"); // Replace API key with your own Cloudinary API key\n      formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n\n      // Replace cloudinary upload URL with yours\n      return axios.post(\n        \"https://api.cloudinary.com/v1_1/bartek985/image/upload\",\n        formData, \n        { headers: { \"X-Requested-With\": \"XMLHttpRequest\" }})\n\n        .then(response => {\n                this.setState({ url: response.data.url });\n\n        console.log(\"state url:\", this.state.url);\n        imgPreview.src = this.state.url;\n\n       });\n\n    });\n\n    // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n    axios.all(uploads).then(() => {\n      // ... do anything after successful upload. You can setState() or save the data\n        console.log('Images have been uploaded')\n\n        URL = this.state.url\n\n        const str = URL;\n        const add = 'c_scale,w_400/';\n        const len = URL.length;\n        const res = str.substring(0, 49);\n        const res1 = str.substring(49, len);\n        const result = res + add+ res1;\n        URL = result;\n\n\n        function translate() {\n\n          console.log(\"URL\", URL)\n\n          const OpenWhiskUrl = `https://openwhisk.eu-gb.bluemix.net/api/v1/web/bartek985%40hotmail.com_dev/default/faas.json?name=${URL}`\n\n          const ourRequest = new XMLHttpRequest();\n\n          ourRequest.open(\"POST\", OpenWhiskUrl, true);\n          ourRequest.setRequestHeader('Content-type','application/json');\n          \n          \n          ourRequest.onload = function() {\n            if (ourRequest.status === 400) {\n                console.log(\"Error, check your network connection.\");\n                  }\n            else {\n                 Loader('');\n                 document.getElementById('xyz').play();\n                 console.log(\"ourRequest.responseText:\",(ourRequest.responseText).toString());\n                 alert(ourRequest.responseText);\n                 imgPreview.src = '';\n\n                  }\n\n            }\n                ourRequest.send(JSON.stringify(OpenWhiskUrl));\n        }\n\n        translate();\n\n\n    });\n\n\n }\n\n  render() {\n    return (\n           <div>\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h3> This app is using MobileNet model with tfjs-node to predict objects from an image</h3>\n              </header>\n            </div>\n              <audio id=\"xyz\" src={sound} preload=\"auto\"></audio><br/>\n\n            <div id=\"drp\">\n              <Dropzone  \n                onDrop={this.handleUploadImages}\n                multiple\n                accept=\"image/*\"\n              >\n              Press to select files to upload, or make a pic when on mobile.\n              </Dropzone><br/>\n            \n           </div>         \n\n\n          <div id=\"loading-message\">\n            <p>This will take a few moments ...</p>\n          </div>\n      \n          <div className=\"sk-cube-grid\" id=\"sk-cube-grid\">\n            <div className=\"sk-cube sk-cube1\"></div>\n            <div className=\"sk-cube sk-cube2\"></div>\n            <div className=\"sk-cube sk-cube3\"></div>\n            <div className=\"sk-cube sk-cube4\"></div>\n            <div className=\"sk-cube sk-cube5\"></div>\n            <div className=\"sk-cube sk-cube6\"></div>\n            <div className=\"sk-cube sk-cube7\"></div>\n            <div className=\"sk-cube sk-cube8\"></div>\n            <div className=\"sk-cube sk-cube9\"></div>\n          </div><br/>\n\n          <img src=\"\" id=\"img-preview\" alt='' width=\"200\" height=\"200\" />\n\n         </div>\n      )\n    }\n\n  }\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}